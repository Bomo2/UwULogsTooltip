UWULogsData_Loaders = UWULogsData_Loaders or {}
UWULogsData_Loaders["6_3"] = function()
  local LibDeflate = LibStub("LibDeflate")
  local compressed = "rVxNk9vGEb3nV6h0Vk3N9wwOOURyKbFs2S7LcT5cOYAkloSJJRiQkJZK-b9nuIkgQngDTHtnD1ItpJpqzPTrfv26B1117rvDs__84dmzX56_27X9sTyd-8Pzfz374-PD6-Pj42-Cc8Zf_P_R6fHR86_X1bprPxyef3re_e-_fvp1dbPO9ffmfvTg-mj_-MS_uHl0PJwfHxbeG8btp3_67cXndTYfIgs5uJBSnHkDFtqcIusIAxdyyrHCgYXutrGFLFzIOMtEARbq7mgLeSuYEGCh4zG2ENyjcLyfD3i00Oq4jq0kiSv9u4msJDlayTuDFzrFdjviR8Li42_2sTcT6W_2-NfjH788f9muVpdN3WyqDkCosIPzLEFIkiGk4KtbY5hADhuHEFwofqhRCGGDguezAp1FHEEYibJgxoN1ogDC9qhCsUKT8INdlRvmFXL6KHwgegpjDZMSLRRHD7RIesEk2ukoeohwjqMH75B0THy507fg-X7b3m7VgBrDlEpDzfDfnph4tAxngKIzETXeXo1HhxlPPITIMwubAr6ZDd7lULqIwgbukA8_zKMdisIGJlRfGMUkik9x2OAjU04yi-JBHDZ4IesdI6EGn7wvCob2OQoaDGKv9dQTRxmn3nb1uew2ADnhTYoiDTmajBwMchNynKYhBy9kA9NCfhEHDl5GCKaRWxDTjdYhj5LSDV6HF5wVNLoWYbRqiIqpbA1ukLCaWVq6gQtZLzzeoShw4DpOmpgHkdJNoSxn-ssdGiGnq8pN1277CkOHD5iYh47JBB0tBeOQpdKg46z1TCNKQ8SODOUXjPE07DgXfJ6Wc7A93IVDQR5GpGo-UEdayonsj1PMwoVo0Ak5kMrUYsE3JGWEZSJTK0K9NEnKt9B505_Oh7Y9QOSEWisNOJYMnEgtrTmTKBbGgQOTrXOC45oiChxMIbgumCapBJG6VXucvKLAgaTP68CNTIYaR7sIkOPIwaxPhSKQSNYiwo4zNIEAA9B6yRz0IBJwlA1s1s2VOG_Xx3q9bxBurB2IwRJwBg0hGTiYXBbaMUUiWXgdFwAIa9-ov0fskZwJtE7U3yOVr3BMk0gWjgeFL5hF-iOxpg-kOPgFXCjq77iq0AoXJ7SqIjAEPi1Lb_30m0tX1yXwUlMkS1ie7KUR3cAJViCvoNGZQopwmigKEksB4UNJloHOyHAIBmVrqvIU3osjmkZl8Cp4KdwgIoO3gV_NBcFXu_K-X7f35aVFKumV_8s0FyvILqbxkUrJPDrSqIvhdWR4c0USN2F-jKs9URfDedYYwyytSoQLBQrvmaIFMEKX4dY5fj73zR5FnsCRnU1zC8FjfkELGY4HaEFxmBYyrJaeGZRoaSEjjlBi6WKMtLhrRIwZRhvNzJcef3uer7uyH-36cJ582JLF86Q3FKG1OgCdSRLBx-u4wBct2j6aXxgyzAmHQM8kKpeopKLqMNG9pHSAmI9ySd_VbX-qzxfgYjKdrAh6wy0mUnAsg9FczCpumXu6cGl5YE8TGYzuY6pQIbWRBH8MHRvqnIlocnui31X1pUWH6Vmili3obSDcdHEBV_CdiYpcFOfEsKNCvUars_A6V2EvgyCnpZYDVXtKvBBX34JxhxYuQnq0mKbQGKy2wjD1JfhunfQv_Q67qDSJPpqr4SK1IaYiWBLawnpMdWi1txMuBF0aU0zHzEiDrLr-VDZNdY9OwjKT2DMWdP0evrkSxuGkR4wWcXjSwoXiWuXofakiD3sNLMUw_XSaImEK-R0upmEzbtQiardlt0FqndTD1i46GF3nJs4AUNORE6CpTD9Q_1gezTWnv6rKTYU601IMiv3i9tHVzpiOhCfuiLsnRch6HkU4Gjyl5R62oWjojJtDO0x5Hc-BkxhEdNKH_4j20HK58jqUurThP4g-IxRzc8T13aV5Xx4O5cMDcHgRElIqfc0knBofyBDK6FSH9wYMbtEdXoSERFTH8DqZ1BQRnVggljS_Y3AWnpcxzGRgTlE1gAgc7iwr5poEL5v-XDV3KD2GBJNaeNM1XDymaJzHg6VEd1cmVjET3d2FqgZ2s4j0K2oPMcCHco1JKB7S_EtAFXKc9s_V-ly3B6T7ic_dk8Uh6KiOS2ROMkQM_vRpMhnOFE9vEXO2yaL7Ka44yyDXiVyEWoWQOh1AufWMv5Xn9a7tz2fkGGKY-1p0jExqnbxOw9ImR3CjIEaoiQJP2AJHSpAwFGqbhxLG9WBagoy7F9FPw8-0a3HrXv_c1octah4JznziOJ-MqodEcV_FaBNR3Q_Mc9onvn3rt3VXrht44yS8t0oNtlFFikirFlt8r8quu9xXh_YDsLgYGrGLBmcavJSeO8ZpQ_oQLjowEIlgR0z4MhZNaLATeLaHGNP9JMOMap4P7REcoh9k6sVDzCaOGIlb3cQpESFxrCLWKC6PxB6wb3D1SoydMvxQrxXhDeKRaRNadSGsm9Zwt571j35fH9p9eUbh3LPESQAZF49oI7FKgfn_ERL6uzsYgj0TqZknU-HvfKHnxxBfdqFyu2u7dYW0CjcI-IsW04u3yIi4KGbjzHfltl6Vpx2cDHFDo3TxflimgsIZraYMa0R0q3rTQ1sTt_Zz2n6iqep6G2COPnx_PF5qaKpJbGapKB0nztuEAmI66jeuHzb9rtpDa1OHxlSm9nDwWcmKuZjwun14uJzO5QraKxPDgsrUKnRcuOkY-CiGNeURzVG44Rb-oq2ZOJn1oYSZpfo_Xi_urGqkMARzEymkirIP2gT0dUQVXhyg6gIG31On6gJFjnsyIj4ORLuJHBdaaTeRpQpE3c71m971m1_rDk2P2EEbXPSJKGUgUi57_VjERHAb-XD58WP5K7TWp2Y0OmfA_f_FuZw_devdpnpfN9DeRLVXZSIMVhdieufn1tyf71FhYpNnDnUmqiC1sTm6J6oQariSCN_476czvpEVXjoxHupMpMOqULa4OaT-9dBVTXU414cttDj1xr_OpARaofm0OXVr8bflfV1h508d-tFR5kGcA-aWT4d-Rgp8e2xq9BWfz73QRWMz0Q5TWD0_ZfGmPqAyxA515qKpUdZBHTqC1e0oCjbb8gBZh0meNdWZNA8TCr3pPcMRAe33p7KD93iGYa9Fa6P5kKhjOuOmJGmUvXfVZYeN9ameEE2HRPEWKvojR7g_9udy00Z216UanCkhmhDA5tPDN2Xf1OdTi33XJmYIkykthgJ6EHGw61Z1_REKKobpxORgMqUzI61iYs7an9qHer0pt9uIxakZwmRKZ4Z7x9xc1f9DuWra6rRuV8iBdTIBNZnShHbKDj0aLFqVq8t511WI4uhBbF20N1OFGmidmL3l9l31vjq0aDhVD0XMorHRTEGfCQGzl2OFbb9DXVk9xOxFY3MVTjr8TD9gMSL3dXlYl9t2c9oh5Uozk6gFmUzlU4hmZjr2PA6_TXt3F0yuLtiBVWI-NpkyhpbXrx3MlVBf9VWDsoVmIlEOspmyhebKzPOyn3ZVubmg4KsGjW7R2kzpIvhCwewc2N5UqxKWair52xn0RIGn1i26zTxiZVV13pUoNChmE2FmM0muylxnZucY7w8fDtXDsatO8Moh04kgs5myGh6hGMXdfo-vu6bbGq9-iNf2Fo193W_bc_0e25uqZ9tM5Y_j1GmZ2HCYxcNhxFatFJKJOcr1bdvuV9WuPmx6VO-qQbRd3MFMI_Gy8JLp2TbWR2CoTCZbNlNHM_BvILDfGvrnvmlQv00mVzY2U14VIVkNgtsT_NJev2qEGvbEWzcFn9fMX7Uf2z1iUZKpxKrF5dJKpeeTKxGjEqDt6tN5t2pKfCmHiURi7aKpnjhUK643WebS59t1eX-EVaFkIlEwcrnGHQU30wmlEY0q2_saG5sanFw819OGKonfO42MDPLI1VLydxvn-eerwD-Pp0NVot60SP4Mp8vEO0Qhi_lJ3K8fkDzMkymdi2ZxspY9_cb7iNF15f4MPxTDmUmkHC5TwjQSfE37k7G__Rc="
  local decoded = LibDeflate:DecodeForPrint(compressed)
  local decompressed = LibDeflate:DecompressDeflate(decoded)
  UWULogsData = UWULogsData or {}
  UWULogsData[6] = UWULogsData[6] or {}
  UWULogsData[6][3] = assert(loadstring("return "..decompressed))()
end
